Author: Zongze Li
zongzeli2@my.unt.edu

Here is something must hidden from user. If you are not a developer, please do not change anything in source code.

1. About calling sub pages from GUI page
	If you developed a sub page, please first import this sub page's python file as external lib on the top of class_opts.py then add the sub page's show_page function to the function "import_outside_functions" in class_opts.py.
	For example:
		1) Path "sub_pages" is already added to class_opts.py.
		2) The sub page power_control is defined in file "power_control.py". So please add one command "import power_control" on the top of class_opts.py.
		3) Then, please add one more command "self.show_power_control = power_control.show_power_control" in the function "import_outside_functions" in class_opts.py. This can ensure class_opts.py able to call sub page power_control's show page function.
		4) To make the sub page able to be opened by GUI's botton, please add one step_command in step_commands.py. The command element in the step should be the sub page's showing function. For example:
			step = ["", "", "", "", ""]
			step[0] = "PS control page"
			step[1] = "'./sub_pages'"
				#path
			step[2] = "self.show_power_control"
				#class_opt function
			step[3] = "power supply control"
				#explain
			step[4] = 1
				#mode
			step_commands.append(step)
		   This can make sure the function "exe_buttonbox_command" in class_opts.py can call sub page's showing function.  
		5) "exe_buttonbox_command" function is executing step_commands listed in step_commands.py according to their mode. 
			Mode == 0 means executing commands in the same way as linux command line. The command execution results can be extracted from stdout or stderr and can be shown on stdout_box on GUI page.
			Mode == 1 means opening sub page. The method of opening sub page is using python command 'exec(command + "(event, " + str(button_num) + "," + path + ")")'. So, to guarantee consistency of function calling, all variables in sub page showing functions must in this format: 
				def show_power_control (self, e, button_num, path):
			No matter if the element "path" is useful in sub page or not.

2. About sub page "power_control"
	The element "path" in power_control's step_command is not useful in this page.
	Sub page "power_control" is designed to control power supply devices. All the controlling functions are defined in library files "e3633a/e3646a_monitor_lib_version.py". These files are converted from original files from "/home/maps/git/misc_software/usbserial_testbeam/".
	In sub page power_control there are three groups of power supply devices:
		PS_0: e3646a type, /dev/ttyUSB_id4 
		PS_1: e3633a type, /dev/ttyUSB_id5 
		PS_2: e3633a type, /dev/ttyUSB_id6
	Currently, PS_0 and PS_1 are tested, if you want to test PS_2 please uncomment:
			#self.PS_2_ser = e3646a.e3646a_serial_connect(PS_2_USB_ID)
		and comment:
			self.PS_2_ser = e3646a.e3646a_serial_connect_debug(PS_2_USB_ID)
		And uncomment:
			self.Bind(wx.EVT_TIMER, self.PS_2_opt_process_debug, self.PS_2_timer)
		and comment:	
			#self.Bind(wx.EVT_TIMER, self.PS_2_opt_process, self.PS_2_timer)
	
	IMPORTANT:
	In the command line control method (for example, /home/maps/git/misc_software/usbserial_testbeam/e3646a/e3633a_monitor.py) it use a while loop to update power supply devices' status. My understanding is once write command to power supply device the control process need to wait a period for devices' respond. That is why in functions like power_on(ser), recall_settings(ser) there are a lot of sleep(WAIT). 

	One main different from my sub page to the original command line control method is the pages generated from wxpython library cannot use while loop, otherwise the following functions cannot be called. As I can find in each while loop round it will wait no longer than two seconds. Only recall_settings need to wait one second (5*WAIT). This made me assign each PS device a timer which will trigger the PS_*_opt_process function in each two seconds. In power_control.py there is a parameter WAIT = 2000 represents 2 seconds. Each Power Supply device's operate process, for example "PS_0_opt_process" is traggered by this parameter WAIT defined time period.
 
	Opening power_control sub page will make the main RU GUI page respond slow. I guess that is because the Power supply operation processes are traggered every two seconds and RU NUC's memory is not as large as my computer. This two second period is necessary. 

	Once user click the bottom for one PS device, the value of "self.PS_*_last_opt" will change to: 
	"o": on
	"f": off
	"r0": recall
	"r1": redraw_settings
	Each stage executed, the last_opt will change to: 	
	"w": wait

	Each two seconds when PS_*_opt_process triggered, it will do operation according to the value of last_opt. The state machine listed in PS_*_opt_process is clear.
	As the main function in e3646/e3636a_monitor.py described, when connected with USB port the initial operation is redraw_settings(), so I make each device's last_opt initial value as 'r1', which will call redraw_settings() function.
	As recall_settings function need to wait one second, 'r0' status will occupy one second. 
	

3. About sub page "stave_config"
	Sub page "stave_config" have two columns of parameters and four buttons. The element "path" in stave_config's step_command is very important. The path should indicate the path of my function library folder "py_gui".
	I suggest you copy the "py_gui" folder to the same path of "py", e.g. "/home/maps/git/misc_software/usbserial_testbeam/"
	As I said in user_manual.txt, please update the files in "py_gui" if the files in "py" have any update.
	Here are three important things need to pay attention:
		1) Once click the "Config stave" button or "Read parameter from stave" button, the function "exe_button_click" or "read_button_click" will create a command according to the testbench file name the user listed in "py_gui/stave_config_file.txt". For example:
			command = "./testbench_hic.py setup_sensors"
			In previous command line version, testbench files are using python library "fire" to call functions in testbench_base.py use the similar way of calling linux commands. 
		2) If write parameters to stave, the linux command execute result messages are shown from stderr, not stdout. The reason is still unknown but will not affect writing the parameters to the staves. 
			If you think the button change to red makes you feel uncomfortable, you can modify the coloring feature in function "exe_button_click".


 
		3) I add a "read_sensors" function in testbench_base.py to read parameters from staves. We can use the testbench file (such as testbench1.py) to call this "read_sensors" function to read parameters from the stave you want to read. 


4. Some of my thinking:
	1) As I can find from Felix cheatsheet, Felix do not need a lot of parameter configurations. So according to the current version, just convert the command line commands into the step_command.py file is enough. 
	2) In RU cheatshee, there are a lot of operations calling py/testbench1.py to configurate the staves. Right now we only have one stave. It will be easy and clear to write such operations into step_commands.py. However, if in the future we add more staves into the system, keep adding step commands maybe not a good idea. We can have two solutions:
		a. Group operations into shell script and use one step command to execute this shell script.
		b. Add one sub page to select which stave you want to configurate and execute step commands which listed in this sub page.
	   In my opinion, the solution a. is a good idea. Please refer my note 1. for the procedure of adding new sub page.
	3) In Power_control sub page. Once open it, all the buttons' color are white. Its color should be initialized according to the status message read from power supply device. To add this feature you need to add a message pattern recognition feature in "wait" stage or "r1" stage. The status message is also shown in the message box, so the button color is not initialized will not be a big problem.
